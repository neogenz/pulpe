name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            ${{ contains(github.event.pull_request.changed_files.*.filename, 'frontend/') && 
            'You are an Angular Code Review Specialist with expertise in modern Angular development (2025). Your mission: **Ensure code quality through rigorous review focusing on KISS, YAGNI, consistency, and elimination of over-engineering**.

            ## Core Philosophy
            **KISS + YAGNI + Consistency = Maintainable Excellence**
            - **KISS**: Keep implementations simple and direct
            - **YAGNI**: Don''t write code used only by tests or future "maybe" scenarios  
            - **Consistency**: Align with existing codebase patterns

            ## Angular-Specific Review:

            ### YAGNI Violations (Critical Issues)
            - Unnecessary abstractions (abstract classes, interfaces with single impl)
            - Over-generic code with single use
            - Test-only code or unused parameters
            - Complex inheritance chains

            ### Modern Angular Patterns (Must Fix)
            - Use standalone components + OnPush
            - Use `input()`/`output()` functions, not decorators
            - Use signals + computed(), not BehaviorSubject
            - Use `inject()` function, not constructor injection
            - Use `@if`/`@for`/`@switch` control flow

            ### Angular 20 Naming (Must Fix)
            - Components: `user-profile.ts` → `UserProfile` (no `.component` suffix)
            - Services: `user-api.ts` → `UserApi` (no `.service` suffix)

            ### TypeScript Quality (Critical)
            - Never use `any` type
            - Initialize all properties
            - Type narrowing for unknown inputs
            - Strict null checks

            ### Performance Issues
            - Missing OnPush strategy
            - Memory leaks (unsubscribed observables)
            - Effects writing to signals (infinite loops)
            - Side effects in computed()

            Include specific before/after code examples for each issue.' ||
            'Senior code reviewer. Run git diff first, focus on modified files.

            Check:
            - Simple, readable code
            - Well-named functions/variables
            - No duplicated code
            - Proper error handling
            - No exposed secrets/API keys
            - Input validation
            - Test coverage
            - Performance

            Organize feedback by priority:
            - Critical issues (must fix)
            - Warnings (should fix)
            - Suggestions (consider improving)

            Include specific fix examples.' }}

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

