name: 🚀 CI Pipeline

on:
  push:
    branches: [main, develop] # Seulement sur les branches principales
  pull_request:
    branches: [main, develop] # Tests sur toutes les PRs vers ces branches

# Éviter les runs multiples pour la même ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Sécurité : permissions minimales
permissions:
  contents: read
  checks: write
  pull-requests: read

# Variables globales
env:
  NODE_VERSION: "22"
  PNPM_VERSION: "10.12.1"
  BUN_VERSION: "1.2.17"

jobs:
  # 📦 INSTALL & CACHE
  install:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      pnpm-cache-hit: ${{ steps.pnpm-cache.outputs.cache-hit }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm" # 🚀 Cache automatique intégré
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: 📦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

  # 🗄️ SUPABASE SETUP (Approche officielle 2025)
  supabase-setup:
    name: 🗄️ Setup Supabase Local
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: install
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🗄️ Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 🐳 Start Supabase Local (Optimisé)
        working-directory: backend-nest
        run: |
          echo "🚀 Starting Supabase local instance..."
          # Exclure les services non nécessaires pour gain de performance
          supabase start --exclude studio,inbucket,imgproxy
          
          echo "⏳ Health check robuste..."
          timeout=180
          counter=0
          until curl -s http://127.0.0.1:54321/rest/v1/ >/dev/null; do
            if [ $counter -gt $timeout ]; then
              echo "❌ Timeout waiting for Supabase"
              supabase status  # Debug en cas d'échec
              exit 1
            fi
            echo "Waiting for Supabase... ($counter/180s)"
            sleep 1
            counter=$((counter + 1))
          done
          echo "✅ Supabase ready!"

      - name: 🔧 Generate TypeScript Types
        working-directory: backend-nest
        run: |
          echo "📝 Generating TypeScript types from local schema..."
          supabase gen types typescript --local > src/types/database.types.ts
          echo "✅ Types generated"

      - name: 🔧 Setup CI Environment
        working-directory: backend-nest
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_LOCAL_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_LOCAL_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_LOCAL_SERVICE_ROLE_KEY }}
        run: |
          echo "📝 Creating CI environment file..."
          cp .env.ci .env
          
          # Inject secrets into .env file
          echo "SUPABASE_URL=${SUPABASE_URL}" >> .env
          echo "SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}" >> .env
          
          echo "✅ Environment ready"

      - name: 💾 Save Supabase State
        uses: actions/upload-artifact@v4
        with:
          name: supabase-state
          path: |
            backend-nest/.env
            backend-nest/src/types/database.types.ts
            backend-nest/supabase/.temp/
          retention-days: 1

  # 🏗️ BUILD (Modifié pour dépendre de supabase-setup)
  build:
    name: 🏗️ Build Projects
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [install, supabase-setup]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: 📦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 🗄️ Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 📥 Download Supabase State
        uses: actions/download-artifact@v4
        with:
          name: supabase-state
          path: backend-nest/

      - name: 🐳 Restore Supabase
        working-directory: backend-nest
        run: |
          supabase start --exclude studio,inbucket,imgproxy
          
          # Health check rapide pour restore
          timeout=60
          counter=0
          until curl -s http://127.0.0.1:54321/rest/v1/ >/dev/null; do
            if [ $counter -gt $timeout ]; then
              echo "❌ Failed to restore Supabase"
              exit 1
            fi
            sleep 1
            counter=$((counter + 1))
          done
          echo "✅ Supabase restored"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build all projects
        run: pnpm build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            shared/dist/
            frontend/dist/
            backend-nest/dist/
          retention-days: 1

  # 🧪 TESTS UNITAIRES (Modifié pour utiliser Supabase local)
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: 📦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 🗄️ Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 📥 Download Supabase State
        uses: actions/download-artifact@v4
        with:
          name: supabase-state
          path: backend-nest/

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🐳 Start Supabase for Tests
        working-directory: backend-nest
        run: |
          supabase start --exclude studio,inbucket,imgproxy
          
          # Health check pour tests
          timeout=60
          counter=0
          until curl -s http://127.0.0.1:54321/rest/v1/ >/dev/null; do
            if [ $counter -gt $timeout ]; then
              echo "❌ Supabase not ready for tests"
              exit 1
            fi
            sleep 1
            counter=$((counter + 1))
          done
          echo "✅ Supabase ready for tests"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm test:unit
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_LOCAL_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_LOCAL_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_LOCAL_SERVICE_ROLE_KEY }}

      - name: 🧹 Cleanup Supabase
        if: always()
        working-directory: backend-nest
        run: supabase stop

  # 🎭 E2E TESTS avec cache Playwright optimisé
  test-e2e:
    name: 🎭 E2E Tests (${{ matrix.project }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    strategy:
      fail-fast: false
      matrix:
        project:
          - "Chromium - Critical Path"
          - "Chromium - Features (Mocked)"
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # 🚀 Cache Playwright optimisé (bonne pratique officielle)
      - name: 🎭 Get Playwright version
        id: playwright-version
        run: echo "version=$(cd frontend && pnpm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: 🎭 Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}

      - name: 🎭 Install Playwright browsers & deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: cd frontend && pnpm exec playwright install --with-deps

      - name: 🎭 Install Playwright deps only (cache hit)
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: cd frontend && pnpm exec playwright install-deps

      - name: 🎭 Run E2E tests
        run: cd frontend && pnpm test:e2e --project="${{ matrix.project }}"

      - name: 📤 Upload E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ strategy.job-index }}
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 7

  # 🔍 QUALITY CHECKS en parallèle
  quality:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    strategy:
      matrix:
        check: [lint, format:check, quality, deps:check]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: 📦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ${{ matrix.check }}
        run: pnpm ${{ matrix.check }}

  # 🧪 TESTS PERFORMANCE (backend uniquement)
  test-performance:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 🗄️ Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 📥 Download Supabase State
        uses: actions/download-artifact@v4
        with:
          name: supabase-state
          path: backend-nest/

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🐳 Start Supabase for Performance Tests
        working-directory: backend-nest
        run: |
          supabase start --exclude studio,inbucket,imgproxy
          
          # Health check pour tests
          timeout=60
          counter=0
          until curl -s http://127.0.0.1:54321/rest/v1/ >/dev/null; do
            if [ $counter -gt $timeout ]; then
              echo "❌ Supabase not ready for tests"
              exit 1
            fi
            sleep 1
            counter=$((counter + 1))
          done
          echo "✅ Supabase ready for performance tests"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🚀 Run performance tests
        run: pnpm test:performance
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_LOCAL_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_LOCAL_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_LOCAL_SERVICE_ROLE_KEY }}

      - name: 🧹 Cleanup Supabase
        if: always()
        working-directory: backend-nest
        run: supabase stop

  # ✅ SUCCESS JOB pour status checks
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [build, test-unit, test-e2e, quality, test-performance]
    if: always()
    steps:
      - name: ✅ Check all jobs
        if: needs.build.result == 'success' && needs.test-unit.result == 'success' && needs.test-e2e.result == 'success' && needs.quality.result == 'success' && needs.test-performance.result == 'success'
        run: echo "🎉 All CI checks passed!"

      - name: ❌ Check failures
        if: needs.build.result != 'success' || needs.test-unit.result != 'success' || needs.test-e2e.result != 'success' || needs.quality.result != 'success' || needs.test-performance.result != 'success'
        run: |
          echo "❌ Some CI checks failed"
          echo "Build: ${{ needs.build.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Performance: ${{ needs.test-performance.result }}"
          exit 1
