---
description: 
globs: frontend/projects/webapp/src/app/feature/**
alwaysApply: false
---
---
description: Apply Angular feature development patterns for lazy-loaded modules with proper routing, component organization, and boundary compliance when creating or modifying features
globs: frontend/projects/webapp/src/app/feature/**/*.ts
alwaysApply: false
---

Feature Structure:
- Create features in `feature/` directory
- Use lazy loading with dynamic imports
- Export routes with `export default`
- Generate components with Angular CLI
- Use `ng g c feature/feature-name/feature-name --project=webapp`

Route Configuration:
- Add `loadChildren` to app routes
- Use dynamic import syntax
- Configure root redirect to home
- Add fallback route for 404

Feature Organization:
- Create `components/` for feature-specific components
- Create `services/` for feature-specific services
- Use main component as entry point
- Keep routes file separate

Boundary Rules:
- Never import other features directly
- Use shared services from `core/`
- Import only `core/`, `ui/`, `pattern/`
- Create shared features as standard features

Navigation Integration:
- Add feature routes to main layout
- Use route arrays for navigation
- Update navigation in `main-layout.ts`
- Track routes with `$index`
