import { Injectable, inject } from '@angular/core';
import { Router } from '@angular/router';
import { DemoModeService } from './demo-mode.service';
import { DemoDataGenerator } from './demo-data-generator';
import { ROUTES } from '../routing';
import { Logger } from '../logging/logger';
import { AuthApi } from '../auth/auth-api';

@Injectable({
  providedIn: 'root',
})
export class DemoInitializerService {
  readonly #router = inject(Router);
  readonly #demoMode = inject(DemoModeService);
  readonly #dataGenerator = inject(DemoDataGenerator);
  readonly #logger = inject(Logger);
  readonly #authApi = inject(AuthApi);

  /**
   * Initialise le mode d√©mo et redirige vers le dashboard
   */
  async initializeDemoMode(): Promise<void> {
    try {
      this.#logger.info('üé≠ Initialisation du mode d√©mo...');

      // Activer le mode d√©mo
      this.#demoMode.enableDemoMode();

      // V√©rifier si les donn√©es sont d√©j√† initialis√©es
      if (!this.#demoMode.isInitialized()) {
        this.#logger.info('üé≠ G√©n√©ration des donn√©es de d√©monstration...');

        // G√©n√©rer toutes les donn√©es
        const demoData = this.#dataGenerator.generateAllDemoData();

        // Sauvegarder les donn√©es dans localStorage
        this.#demoMode.saveDemoData('user', demoData.user);
        this.#demoMode.saveDemoData('session', demoData.session);
        this.#demoMode.saveDemoData('templates', demoData.templates);
        this.#demoMode.saveDemoData('template-lines', demoData.templateLines);
        this.#demoMode.saveDemoData('budgets', demoData.budgets);
        this.#demoMode.saveDemoData('budget-lines', demoData.budgetLines);
        this.#demoMode.saveDemoData('transactions', demoData.transactions);

        // Trouver le budget du mois en cours
        const currentMonth = new Date().getMonth() + 1;
        const currentYear = new Date().getFullYear();
        const currentBudget = demoData.budgets.find(
          (b) => b.month === currentMonth && b.year === currentYear,
        );

        if (currentBudget) {
          // Sauvegarder le budget courant pour un acc√®s rapide
          localStorage.setItem(
            'pulpe-current-budget',
            JSON.stringify(currentBudget),
          );
        }

        // Marquer comme initialis√©
        this.#demoMode.markAsInitialized();

        this.#logger.info('üé≠ Donn√©es de d√©monstration g√©n√©r√©es avec succ√®s');
      } else {
        this.#logger.info(
          'üé≠ Mode d√©mo d√©j√† initialis√©, utilisation des donn√©es existantes',
        );
      }

      // IMPORTANT: R√©initialiser l'√©tat d'authentification pour prendre en compte la session d√©mo
      // Cela est n√©cessaire car initializeAuthState() a √©t√© appel√© avant l'activation du mode d√©mo
      await this.#authApi.initializeAuthState();
      this.#logger.info(
        "üé≠ √âtat d'authentification mis √† jour pour le mode d√©mo",
      );

      // Naviguer vers le dashboard du mois en cours
      const currentMonth = new Date().getMonth() + 1;
      const currentYear = new Date().getFullYear();

      await this.#router.navigate([
        '/',
        ROUTES.APP,
        ROUTES.BUDGET,
        currentYear.toString(),
        currentMonth.toString().padStart(2, '0'),
      ]);

      this.#logger.info('üé≠ Mode d√©mo activ√© avec succ√®s');
    } catch (error) {
      this.#logger.error(
        "Erreur lors de l'initialisation du mode d√©mo:",
        error,
      );

      // En cas d'erreur, d√©sactiver le mode d√©mo
      this.#demoMode.disableDemoMode();

      // Rediriger vers la page d'accueil
      await this.#router.navigate(['/']);

      throw error;
    }
  }

  /**
   * V√©rifie si le mode d√©mo est actif et redirige si n√©cessaire
   */
  async checkAndRedirectIfDemo(): Promise<boolean> {
    if (this.#demoMode.isDemoMode()) {
      if (!this.#demoMode.isInitialized()) {
        // Si le mode d√©mo est actif mais pas initialis√©, l'initialiser
        await this.initializeDemoMode();
      } else {
        // Si d√©j√† initialis√©, juste rediriger vers le dashboard
        const currentMonth = new Date().getMonth() + 1;
        const currentYear = new Date().getFullYear();

        await this.#router.navigate([
          '/',
          ROUTES.APP,
          ROUTES.BUDGET,
          currentYear.toString(),
          currentMonth.toString().padStart(2, '0'),
        ]);
      }
      return true;
    }
    return false;
  }

  /**
   * Quitte le mode d√©mo et retourne √† la page d'accueil
   */
  async exitDemoMode(): Promise<void> {
    this.#logger.info('üé≠ Sortie du mode d√©mo...');

    // D√©sactiver et nettoyer le mode d√©mo
    this.#demoMode.disableDemoMode();

    // Rediriger vers la page d'accueil
    await this.#router.navigate(['/']);

    this.#logger.info('üé≠ Mode d√©mo d√©sactiv√©');
  }

  /**
   * R√©initialise les donn√©es du mode d√©mo
   */
  async resetDemoData(): Promise<void> {
    if (!this.#demoMode.isDemoMode()) {
      this.#logger.warn(
        "Tentative de r√©initialisation alors que le mode d√©mo n'est pas actif",
      );
      return;
    }

    this.#logger.info('üé≠ R√©initialisation des donn√©es de d√©monstration...');

    // R√©initialiser les donn√©es
    this.#demoMode.resetDemoData();

    // R√©initialiser avec de nouvelles donn√©es
    await this.initializeDemoMode();

    this.#logger.info('üé≠ Donn√©es de d√©monstration r√©initialis√©es');
  }
}
