#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

/**
 * Script pour g√©n√©rer dynamiquement config.json √† partir des variables d'environnement
 * Version refactoris√©e SANS valeurs par d√©faut magiques
 * Toutes les variables doivent √™tre explicitement d√©finies dans le fichier .env appropri√©
 */

// Charger les variables d'environnement
const envPath = process.env.DOTENV_CONFIG_PATH || ".env";
console.log(`üìÅ Loading config from: ${envPath}`);
require("dotenv").config({ path: envPath });

/**
 * Fonction pour obtenir une variable d'environnement requise
 * @param {string} key - Nom de la variable
 * @param {string} description - Description pour l'erreur
 * @returns {string} Valeur de la variable
 * @throws {Error} Si la variable n'est pas d√©finie ou vide
 */
function getRequiredEnv(key, description) {
  const value = process.env[key];
  if (value === undefined || value === '') {
    throw new Error(`‚ùå Missing required environment variable: ${key} (${description})`);
  }
  return value;
}

/**
 * Fonction pour obtenir une variable bool√©enne
 * @param {string} key - Nom de la variable
 * @param {boolean} defaultValue - Valeur par d√©faut si non d√©finie
 * @returns {boolean} Valeur bool√©enne
 */
function getBooleanEnv(key, defaultValue = false) {
  const value = process.env[key];
  if (value === undefined) return defaultValue;
  return value === 'true';
}

/**
 * Fonction pour obtenir une variable num√©rique
 * @param {string} key - Nom de la variable
 * @param {number} defaultValue - Valeur par d√©faut si non d√©finie
 * @returns {number} Valeur num√©rique
 */
function getNumberEnv(key, defaultValue = 0) {
  const value = process.env[key];
  if (value === undefined) return defaultValue;
  return parseFloat(value) || defaultValue;
}

// Configuration SANS valeurs par d√©faut magiques - toutes les variables sont requises
const config = {
  supabase: {
    url: getRequiredEnv('PUBLIC_SUPABASE_URL', 'Supabase API URL'),
    anonKey: getRequiredEnv('PUBLIC_SUPABASE_ANON_KEY', 'Supabase anonymous key'),
  },
  backend: {
    apiUrl: getRequiredEnv('PUBLIC_BACKEND_API_URL', 'Backend API URL'),
  },
  postHog: {
    apiKey: getRequiredEnv('PUBLIC_POSTHOG_API_KEY', 'PostHog API key'),
    host: getRequiredEnv('PUBLIC_POSTHOG_HOST', 'PostHog host URL'),
    enabled: getBooleanEnv('PUBLIC_POSTHOG_ENABLED'),
    capturePageviews: getBooleanEnv('PUBLIC_POSTHOG_CAPTURE_PAGEVIEWS', true),
    capturePageleaves: getBooleanEnv('PUBLIC_POSTHOG_CAPTURE_PAGELEAVES', true),
    sessionRecording: {
      enabled: getBooleanEnv('PUBLIC_POSTHOG_SESSION_RECORDING_ENABLED'),
      maskInputs: getBooleanEnv('PUBLIC_POSTHOG_MASK_INPUTS', true),
      sampleRate: getNumberEnv('PUBLIC_POSTHOG_SAMPLE_RATE', 0.1),
    },
    debug: getBooleanEnv('PUBLIC_POSTHOG_DEBUG'),
  },
  environment: getRequiredEnv('PUBLIC_ENVIRONMENT', 'Application environment'),
};

const outputPath = path.join(
  __dirname,
  "../projects/webapp/public/config.json",
);

function generateConfig() {
  try {
    console.log("üîß G√©n√©ration du fichier config.json...");

    // Cr√©er le r√©pertoire si n√©cessaire
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // √âcrire le fichier de configuration
    fs.writeFileSync(outputPath, JSON.stringify(config, null, 2));

    // Affichage des informations de configuration (sans exposer les cl√©s sensibles)
    console.log("‚úÖ config.json g√©n√©r√© avec succ√®s");
    console.log(`üìç Fichier: ${outputPath}`);
    console.log(`üåç Environnement: ${config.environment}`);
    console.log(`üîó Supabase URL: ${config.supabase.url}`);
    console.log(`üöÄ Backend API: ${config.backend.apiUrl}`);
    console.log(`üìä PostHog: ${config.postHog.enabled ? 'activ√©' : 'd√©sactiv√©'}`);

    if (config.postHog.enabled) {
      console.log(`   ‚îî‚îÄ Host: ${config.postHog.host}`);
      console.log(`   ‚îî‚îÄ Recording: ${config.postHog.sessionRecording.enabled ? 'activ√©' : 'd√©sactiv√©'}`);
      console.log(`   ‚îî‚îÄ Sample rate: ${config.postHog.sessionRecording.sampleRate}`);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration du config.json:");
    console.error(`   ${error.message}`);

    // Si c'est une erreur de variable manquante, afficher un conseil
    if (error.message.includes('Missing required environment variable')) {
      console.error("\nüí° Conseil:");
      console.error(`   V√©rifiez que le fichier ${envPath} contient toutes les variables requises`);
      console.error("   Ou consultez .env.example pour voir les variables n√©cessaires");
    }

    process.exit(1);
  }
}

// Ex√©cuter le script
generateConfig();
